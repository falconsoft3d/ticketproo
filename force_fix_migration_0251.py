#!/usr/bin/env python
"""
Script alternativo para el servidor de producci√≥n.
Este script fuerza la marcaci√≥n de la migraci√≥n 0251 como aplicada
independientemente del estado actual.

USAR SOLO EN PRODUCCI√ìN DESPU√âS DE VERIFICAR QUE LAS TABLAS EXISTEN.
"""

import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ticket_system.settings')
django.setup()

from django.db import connection
from django.db.migrations.recorder import MigrationRecorder

def force_mark_migration_applied():
    """
    Fuerza la marcaci√≥n de la migraci√≥n 0251 como aplicada
    """
    print("üîß Forzando marcaci√≥n de migraci√≥n 0251 como aplicada...")
    
    try:
        # Verificar si las tablas existen
        with connection.cursor() as cursor:
            if 'postgresql' in connection.settings_dict['ENGINE']:
                # PostgreSQL
                cursor.execute("""
                    SELECT COUNT(*) FROM information_schema.tables 
                    WHERE table_name IN ('tickets_contactcomment', 'tickets_contactattachment')
                    AND table_schema = 'public';
                """)
                table_count = cursor.fetchone()[0]
                
                if table_count == 2:
                    print("‚úÖ Las tablas ContactComment y ContactAttachment existen")
                    
                    # Marcar como aplicada
                    recorder = MigrationRecorder(connection)
                    
                    # Eliminar registro previo si existe
                    cursor.execute("""
                        DELETE FROM django_migrations 
                        WHERE app = 'tickets' AND name = '0251_contact_comments_attachments';
                    """)
                    
                    # Insertar nuevo registro
                    cursor.execute("""
                        INSERT INTO django_migrations (app, name, applied) 
                        VALUES ('tickets', '0251_contact_comments_attachments', NOW());
                    """)
                    
                    print("‚úÖ Migraci√≥n 0251 marcada como aplicada exitosamente")
                    return True
                else:
                    print(f"‚ùå Solo se encontraron {table_count} de 2 tablas esperadas")
                    return False
            else:
                print("‚ÑπÔ∏è  No es base de datos PostgreSQL")
                return False
                
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

if __name__ == '__main__':
    print("üö® SCRIPT DE EMERGENCIA - Marcaci√≥n Forzada de Migraci√≥n 0251")
    print("=" * 60)
    print("‚ö†Ô∏è  USAR SOLO EN PRODUCCI√ìN DESPU√âS DE VERIFICAR TABLAS")
    print("=" * 60)
    
    try:
        if force_mark_migration_applied():
            print("\n‚úÖ ¬°Migraci√≥n marcada exitosamente!")
            print("\nAhora ejecuta: python manage.py migrate")
        else:
            print("\n‚ùå Error al marcar la migraci√≥n")
            sys.exit(1)
            
    except Exception as e:
        print(f"\n‚ùå Error cr√≠tico: {e}")
        sys.exit(1)