#!/usr/bin/env python
"""
Script para resolver el problema de la migraci√≥n duplicada 0251
en el servidor de producci√≥n con PostgreSQL.

Este script marca la migraci√≥n 0251 como aplicada sin ejecutar las operaciones,
ya que la migraci√≥n 0249 ya cre√≥ las tablas necesarias.

Uso:
python fix_migration_0251.py
"""

import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ticket_system.settings')
django.setup()

from django.db import connection
from django.db.migrations.recorder import MigrationRecorder

def fix_migration_0251():
    """
    Marca la migraci√≥n 0251 como aplicada sin ejecutar las operaciones
    """
    print("üîß Iniciando correcci√≥n de migraci√≥n 0251...")
    
    # Verificar si las tablas ya existen
    with connection.cursor() as cursor:
        # Verificar PostgreSQL
        if 'postgresql' in connection.settings_dict['ENGINE']:
            cursor.execute("""
                SELECT tablename FROM pg_tables 
                WHERE tablename IN ('tickets_contactcomment', 'tickets_contactattachment');
            """)
            existing_tables = [row[0] for row in cursor.fetchall()]
            print(f"üìã Tablas existentes: {existing_tables}")
            
            if 'tickets_contactcomment' in existing_tables and 'tickets_contactattachment' in existing_tables:
                print("‚úÖ Las tablas ContactComment y ContactAttachment ya existen")
                
                # Verificar si la migraci√≥n 0251 est√° marcada como aplicada
                recorder = MigrationRecorder(connection)
                applied_migrations = recorder.applied_migrations()
                
                migration_0251 = ('tickets', '0251_contact_comments_attachments')
                
                if migration_0251 not in applied_migrations:
                    print("üöÄ Marcando migraci√≥n 0251 como aplicada...")
                    recorder.record_applied('tickets', '0251_contact_comments_attachments')
                    print("‚úÖ Migraci√≥n 0251 marcada como aplicada exitosamente")
                else:
                    print("‚ÑπÔ∏è  La migraci√≥n 0251 ya est√° marcada como aplicada")
                    
            else:
                print("‚ùå Las tablas no existen. La migraci√≥n 0249 no se aplic√≥ correctamente.")
                return False
                
        else:
            print("‚ÑπÔ∏è  Base de datos no es PostgreSQL, no es necesario aplicar correcci√≥n")
            
    print("üéâ Correcci√≥n completada exitosamente")
    return True

def check_migration_status():
    """
    Verifica el estado actual de las migraciones relacionadas
    """
    print("\nüìä Estado de migraciones relacionadas:")
    recorder = MigrationRecorder(connection)
    applied_migrations = recorder.applied_migrations()
    
    relevant_migrations = [
        ('tickets', '0249_contactcomment_contactattachment'),
        ('tickets', '0250_auto_20251030_2004'),
        ('tickets', '0251_contact_comments_attachments'),
        ('tickets', '0252_alter_contactattachment_file_and_more'),
        ('tickets', '0253_auto_20251030_2028'),
        ('tickets', '0254_opportunityactivity_contact'),
        ('tickets', '0255_contact_country'),
    ]
    
    for migration in relevant_migrations:
        status = "‚úÖ Aplicada" if migration in applied_migrations else "‚ùå Pendiente"
        print(f"  {migration[1]}: {status}")

if __name__ == '__main__':
    print("üõ†Ô∏è  Script de Correcci√≥n de Migraci√≥n 0251")
    print("=" * 50)
    
    try:
        check_migration_status()
        
        # Solo aplicar correcci√≥n si es necesario
        recorder = MigrationRecorder(connection)
        applied_migrations = recorder.applied_migrations()
        migration_0251 = ('tickets', '0251_contact_comments_attachments')
        
        if migration_0251 not in applied_migrations:
            print("\nüîß Aplicando correcci√≥n...")
            if fix_migration_0251():
                print("\n‚úÖ ¬°Correcci√≥n aplicada exitosamente!")
                print("\nAhora puedes ejecutar: python manage.py migrate")
            else:
                print("\n‚ùå Error en la correcci√≥n")
                sys.exit(1)
        else:
            print("\n‚ÑπÔ∏è  No es necesario aplicar correcci√≥n")
            
        print("\nüìä Estado final:")
        check_migration_status()
        
    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        print("\nSi el error persiste, considera:")
        print("1. Verificar que la migraci√≥n 0249 se aplic√≥ correctamente")
        print("2. Revisar las dependencias de las migraciones")
        print("3. Consultar los logs de la base de datos")
        sys.exit(1)